import {
  Injectable,
  InternalServerErrorException,
  Logger,
  NotFoundException,
} from '@nestjs/common';
import { User, Prisma } from '@prisma/client';

import { clerkClient } from '../config/clerk.config';

import { UpdateProfileDto } from './users.controller';
import { PrismaService } from '../prisma/prisma.service';

@Injectable()
export class UsersService {
  private readonly logger = new Logger(UsersService.name);

  constructor(private prisma: PrismaService) {}

  async syncUserWithClerk(tokenPayload: Record<string, any>): Promise<User> {
    const clerkId = tokenPayload?.sub;
    if (!clerkId) {
      this.logger.error(
        '[ERROR] Payload do token n√£o cont√©m "sub"',
        tokenPayload,
      );
      throw new InternalServerErrorException(
        'ID do usu√°rio Clerk ausente no token.',
      );
    }

    this.logger.log(
      `üîÑ [Sync] Iniciando sincroniza√ß√£o para Clerk ID: ${clerkId}`,
    );

    try {
      this.logger.log(`üìã [Sync] Buscando usu√°rio no Clerk: ${clerkId}`);
      const clerkUser = await clerkClient.users.getUser(clerkId);

      const primaryEmailObject = clerkUser.emailAddresses.find(
        (e) => e.id === clerkUser.primaryEmailAddressId,
      );
      const email =
        primaryEmailObject?.emailAddress ||
        clerkUser.emailAddresses[0]?.emailAddress;

      if (!email) {
        this.logger.error(
          `[ERROR] Email n√£o encontrado no Clerk para ${clerkId}`,
          clerkUser.emailAddresses,
        );
        throw new InternalServerErrorException(
          'Email principal n√£o encontrado no Clerk.',
        );
      }

      const firstName = clerkUser.firstName || '';
      const lastName = clerkUser.lastName || '';
      const imageUrl = clerkUser.imageUrl || null;
      const phoneNumber = clerkUser.phoneNumbers?.[0]?.phoneNumber || null;

      let fullName = `${firstName} ${lastName}`.trim();

      if (!fullName) {
        const emailName = email.split('@')[0];
        fullName = emailName.charAt(0).toUpperCase() + emailName.slice(1);
      }

      this.logger.log(`üìä [Sync] Dados extra√≠dos do Clerk:`, {
        firstName: `"${firstName}"`,
        lastName: `"${lastName}"`,
        fullName: `"${fullName}"`,
        email: `"${email}"`,
        phoneNumber: phoneNumber || 'N/A',
      });

      const existingUser = await this.prisma.user.findUnique({
        where: { clerkId },
      });

      if (existingUser) {
        this.logger.log(
          `‚ôªÔ∏è [Sync] Usu√°rio existente encontrado, fazendo merge: ${existingUser.id}`,
        );

        const updateData: Prisma.UserUpdateInput = {
          email,
          imageUrl,
        };

        if (firstName) {
          updateData.firstName = firstName;
        }
        if (lastName) {
          updateData.lastName = lastName;
        }

        updateData.name = fullName;

        if (!existingUser.phoneNumber && phoneNumber) {
          updateData.phoneNumber = phoneNumber;
        }

        const user = await this.prisma.user.update({
          where: { clerkId },
          data: updateData,
        });

        this.logger.log(`‚úÖ [Sync] Usu√°rio atualizado: DB ID ${user.id}`, {
          name: `"${user.name}"`,
          firstName: `"${user.firstName}"`,
          lastName: `"${user.lastName}"`,
        });
        return user;
      }

      const userWithSameEmail = await this.prisma.user.findUnique({
        where: { email },
      });

      if (userWithSameEmail) {
        this.logger.warn(
          `‚ö†Ô∏è [Sync] Usu√°rio com email ${email} j√° existe com clerkId diferente. Atualizando clerkId de ${userWithSameEmail.clerkId} para ${clerkId}`,
        );

        const updateData: Prisma.UserUpdateInput = {
          clerkId,
          imageUrl,
          name: fullName,
        };

        if (firstName) {
          updateData.firstName = firstName;
        }
        if (lastName) {
          updateData.lastName = lastName;
        }
        if (!userWithSameEmail.phoneNumber && phoneNumber) {
          updateData.phoneNumber = phoneNumber;
        }

        const user = await this.prisma.user.update({
          where: { email },
          data: updateData,
        });

        this.logger.log(
          `‚úÖ [Sync] Usu√°rio sincronizado (email existente): DB ID ${user.id}`,
          {
            name: `"${user.name}"`,
            firstName: `"${user.firstName}"`,
            lastName: `"${user.lastName}"`,
          },
        );
        return user;
      }

      this.logger.log(`‚ûï [Sync] Criando novo usu√°rio no banco de dados`);

      const user = await this.prisma.user.create({
        data: {
          clerkId,
          email,
          firstName: firstName || null,
          lastName: lastName || null,
          name: fullName,
          imageUrl,
          phoneNumber,
        },
      });

      this.logger.log(`üéâ [Sync] Novo usu√°rio criado: DB ID ${user.id}`, {
        name: `"${user.name}"`,
        firstName: `"${user.firstName}"`,
        lastName: `"${user.lastName}"`,
      });

      return user;
    } catch (error: any) {
      this.logger.error(
        `‚ùå [Sync] Falha ao sincronizar usu√°rio ${clerkId}:`,
        error,
      );

      if (error.code === 'P2002') {
        const constraintField = error.meta?.target;
        this.logger.error(
          `üîí [Sync] Constraint √∫nico falhou em ${constraintField} (P2002).`,
        );

        if (constraintField?.includes('email')) {
          try {
            this.logger.log(
              `üîç [Sync] Tentando recuperar usu√°rio existente ap√≥s P2002`,
            );

            const existingUser = await this.prisma.user.findFirst({
              where: {
                OR: [{ clerkId }, { email: tokenPayload.email }],
              },
            });

            if (existingUser) {
              this.logger.log(
                `‚úÖ [Sync] Usu√°rio existente recuperado ap√≥s erro P2002: ${existingUser.id}`,
              );
              return existingUser;
            }
          } catch (recoveryError) {
            this.logger.error(
              '‚ùå [Sync] Falha na recupera√ß√£o ap√≥s P2002:',
              recoveryError,
            );
          }
        }

        throw new InternalServerErrorException(
          `Erro de constraint √∫nico: ${constraintField?.join(', ') || 'campo desconhecido'}`,
        );
      }

      throw new InternalServerErrorException(
        'Falha na sincroniza√ß√£o do usu√°rio.',
      );
    }
  }

  async findOneByClerkId(clerkId: string): Promise<User> {
    this.logger.log(`üîç [Find] Buscando usu√°rio com Clerk ID: ${clerkId}`);
    try {
      const user = await this.prisma.user.findUnique({ where: { clerkId } });
      if (!user) {
        this.logger.warn(
          `‚ö†Ô∏è [Find] Usu√°rio com Clerk ID ${clerkId} n√£o encontrado.`,
        );
        throw new NotFoundException(
          `Usu√°rio com Clerk ID ${clerkId} n√£o encontrado.`,
        );
      }
      this.logger.log(
        `‚úÖ [Find] Usu√°rio encontrado: ${user.id} - "${user.name}"`,
      );
      return user;
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      this.logger.error(
        `‚ùå [Find] Falha ao buscar usu√°rio por Clerk ID ${clerkId}:`,
        error,
      );
      throw new InternalServerErrorException(
        'Falha ao buscar usu√°rio por Clerk ID.',
      );
    }
  }

  async updateProfileByClerkId(
    clerkId: string,
    data: UpdateProfileDto,
  ): Promise<User> {
    this.logger.log(`üìù [Update] Atualizando perfil para Clerk ID: ${clerkId}`);
    this.logger.log(
      `üìã [Update] Dados recebidos:`,
      JSON.stringify(data, null, 2),
    );

    const currentUser = await this.findOneByClerkId(clerkId);
    this.logger.log(`üë§ [Update] Usu√°rio atual:`, {
      id: currentUser.id,
      name: currentUser.name,
      firstName: currentUser.firstName,
      lastName: currentUser.lastName,
      email: currentUser.email,
    });

    let birthDateForUpdate: Date | undefined = undefined;
    if (data.birthDate) {
      try {
        const parsedDate = new Date(data.birthDate);
        if (!isNaN(parsedDate.getTime())) {
          birthDateForUpdate = parsedDate;
          this.logger.log(
            `üìÖ [Update] Data de nascimento processada: ${parsedDate.toISOString()}`,
          );
        }
      } catch {
        this.logger.warn(
          `‚ö†Ô∏è [Update] Data de nascimento inv√°lida: ${data.birthDate}`,
        );
      }
    }

    const updateData: Prisma.UserUpdateInput = {};

    if (data.phoneNumber !== undefined) {
      updateData.phoneNumber = data.phoneNumber || null;
      this.logger.log(
        `üìû [Update] Telefone: "${data.phoneNumber}" -> "${updateData.phoneNumber}"`,
      );
    }
    if (data.gender !== undefined) {
      updateData.gender = data.gender || null;
      this.logger.log(
        `üöª [Update] G√™nero: "${data.gender}" -> "${updateData.gender}"`,
      );
    }
    if (data.imageUrl !== undefined) {
      updateData.imageUrl = data.imageUrl || null;
      this.logger.log(
        `üñºÔ∏è [Update] ImageUrl: "${data.imageUrl}" -> "${updateData.imageUrl}"`,
      );
    }
    if (birthDateForUpdate !== undefined) {
      updateData.birthDate = birthDateForUpdate;
    }

    let needsNameUpdate = false;
    let newFirstName = currentUser.firstName || '';
    let newLastName = currentUser.lastName || '';

    if (data.name !== undefined && data.name.trim()) {
      const nameParts = data.name.trim().split(' ');
      newFirstName = nameParts[0] || '';
      newLastName = nameParts.length > 1 ? nameParts.slice(1).join(' ') : '';
      needsNameUpdate = true;
      this.logger.log(
        `üìù [Update] Nome dividido de "${data.name}" em: "${newFirstName}" + "${newLastName}"`,
      );
    }

    if (data.firstName !== undefined) {
      newFirstName = data.firstName.trim();
      needsNameUpdate = true;
      this.logger.log(
        `üë§ [Update] FirstName NOVO: "${newFirstName}" (era: "${currentUser.firstName}")`,
      );
    }
    if (data.lastName !== undefined) {
      newLastName = data.lastName.trim();
      needsNameUpdate = true;
      this.logger.log(
        `üë§ [Update] LastName NOVO: "${newLastName}" (era: "${currentUser.lastName}")`,
      );
    }

    if (needsNameUpdate) {
      updateData.firstName = newFirstName || null;
      updateData.lastName = newLastName || null;

      const fullName = `${newFirstName} ${newLastName}`.trim();

      if (fullName.length > 0) {
        updateData.name = fullName;
        this.logger.log(
          `‚úÖ [Update] Nome completo NOVO: "${fullName}" (era: "${currentUser.name}")`,
        );
      } else {
        const emailPrefix = currentUser.email.split('@')[0];
        updateData.name =
          emailPrefix.charAt(0).toUpperCase() + emailPrefix.slice(1);
        this.logger.log(
          `üîÑ [Update] Usando fallback para nome: "${updateData.name}"`,
        );
      }
    }

    if (Object.keys(updateData).length === 0) {
      this.logger.log(
        `‚ÑπÔ∏è [Update] Nenhum dado fornecido para atualizar o perfil de ${clerkId}.`,
      );
      return currentUser;
    }

    try {
      this.logger.log(
        `üíæ [Update] Dados a serem atualizados no banco:`,
        JSON.stringify(updateData, null, 2),
      );

      const user = await this.prisma.user.update({
        where: { clerkId },
        data: updateData,
      });

      this.logger.log(
        `üéâ [Update] Perfil atualizado com sucesso! DB ID: ${user.id}`,
      );
      this.logger.log(`‚úÖ [Update] Resultado final:`, {
        name: user.name,
        firstName: user.firstName,
        lastName: user.lastName,
        phoneNumber: user.phoneNumber,
        gender: user.gender,
        birthDate: user.birthDate,
      });

      return user;
    } catch (error: any) {
      if (error.code === 'P2025') {
        this.logger.error(
          `‚ùå [Update] Usu√°rio com Clerk ID ${clerkId} n√£o encontrado para atualiza√ß√£o.`,
        );
        throw new NotFoundException(`Usu√°rio n√£o encontrado.`);
      }
      this.logger.error(
        `‚ùå [Update] Falha ao atualizar perfil para Clerk ID ${clerkId}:`,
        error,
      );
      throw new InternalServerErrorException(
        'Falha ao atualizar perfil do usu√°rio.',
      );
    }
  }

  async create(createUserDto: any): Promise<User> {
    this.logger.warn(
      '‚ö†Ô∏è [Create] M√©todo create direto n√£o recomendado, use a sincroniza√ß√£o.',
    );
    try {
      return await this.prisma.user.create({ data: createUserDto });
    } catch (error) {
      this.logger.error(
        '‚ùå [Create] Falha ao criar usu√°rio diretamente:',
        error,
      );
      throw new InternalServerErrorException('Falha ao criar usu√°rio.');
    }
  }

  async findAll(): Promise<User[]> {
    this.logger.log('üìã [FindAll] Buscando todos os usu√°rios');
    try {
      return await this.prisma.user.findMany();
    } catch (error) {
      this.logger.error(
        '‚ùå [FindAll] Falha ao buscar todos os usu√°rios:',
        error,
      );
      throw new InternalServerErrorException('Falha ao buscar usu√°rios.');
    }
  }

  async findOne(id: string): Promise<User> {
    this.logger.log(`üîç [FindOne] Buscando usu√°rio com ID (DB): ${id}`);
    try {
      const user = await this.prisma.user.findUnique({ where: { id } });
      if (!user) {
        this.logger.warn(
          `‚ö†Ô∏è [FindOne] Usu√°rio com ID (DB) ${id} n√£o encontrado.`,
        );
        throw new NotFoundException(`Usu√°rio com ID ${id} n√£o encontrado.`);
      }
      return user;
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      this.logger.error(`‚ùå [FindOne] Falha ao buscar usu√°rio ${id}:`, error);
      throw new InternalServerErrorException('Falha ao buscar usu√°rio.');
    }
  }

  async update(id: string, updateUserDto: any): Promise<User> {
    this.logger.log(`üìù [UpdateById] Atualizando usu√°rio com ID (DB): ${id}`);
    try {
      await this.findOne(id);
      return await this.prisma.user.update({
        where: { id },
        data: updateUserDto,
      });
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      this.logger.error(
        `‚ùå [UpdateById] Falha ao atualizar usu√°rio ${id}:`,
        error,
      );
      throw new InternalServerErrorException('Falha ao atualizar usu√°rio.');
    }
  }

  async remove(id: string): Promise<User> {
    this.logger.log(`üóëÔ∏è [Remove] Removendo usu√°rio com ID (DB): ${id}`);
    try {
      await this.findOne(id);
      return await this.prisma.user.delete({ where: { id } });
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      this.logger.error(`‚ùå [Remove] Falha ao remover usu√°rio ${id}:`, error);
      throw new InternalServerErrorException('Falha ao remover usu√°rio.');
    }
  }
}
